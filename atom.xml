<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ch3v4l&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-01T11:51:47.960Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ch3v4l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>强网杯2022</title>
    <link href="http://example.com/2022/09/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2022/"/>
    <id>http://example.com/2022/09/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2022/</id>
    <published>2022-09-01T11:50:34.000Z</published>
    <updated>2022-09-01T11:51:47.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯S6初赛-部分题解"><a href="#强网杯S6初赛-部分题解" class="headerlink" title="强网杯S6初赛 部分题解"></a>强网杯S6初赛 部分题解</h1><p>和师傅们一起打强网杯初赛，题目质量很高，算是打过的比较难的比赛了。最终排名47（1135分）。<br>PWN题好多，然而才刚开始学。（乐<br>Misc坐牢，第二天一直在和zlib玩了。<br>vmess还在研究，复现估计就需要两三天。</p><h2 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h2><h3 id="polydiv"><a href="#polydiv" class="headerlink" title="polydiv"></a>polydiv</h3><p>题目给了个模2多项式环计算的class，搭靶机测试一下，第一步sha256验证，第二步题目会给出$a(x)$、$c(x)$、$r(x)$三个模2多项式，让你找到一个满足$a(x)b(x)+c(x)==r(x)$的多项式$b(x)$。<br>因此只需要写一个模2除法即可。提取数据做好格式处理就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log,floor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF2_sub</span>(<span class="params">n1, n2</span>):</span><br><span class="line">    <span class="keyword">return</span> n1 ^ n2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF2_div</span>(<span class="params">n1, n2</span>):</span><br><span class="line">    <span class="keyword">if</span> n2 == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        len1 = <span class="built_in">len</span>(<span class="built_in">bin</span>(n1))</span><br><span class="line">        len2 = <span class="built_in">len</span>(<span class="built_in">bin</span>(n2))</span><br><span class="line">        lensub = len1 - len2 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> lensub &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> lensub == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> lensub &gt; <span class="number">1</span>:</span><br><span class="line">            div = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> len1 &gt;= len2:</span><br><span class="line">                n1 ^= (n2 &lt;&lt; (len1 - len2))</span><br><span class="line">                div ^= (<span class="number">1</span> &lt;&lt; (len1-len2))</span><br><span class="line">                len1 = <span class="built_in">len</span>(<span class="built_in">bin</span>(n1))</span><br><span class="line">            <span class="keyword">return</span> div</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;182.92.161.17&#x27;</span>, <span class="number">31466</span>)</span><br><span class="line"></span><br><span class="line">s = p.recv()</span><br><span class="line">kk = <span class="built_in">str</span>(s)[<span class="number">14</span>:<span class="number">30</span>]</span><br><span class="line">tt = <span class="built_in">str</span>(s)[<span class="number">35</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(kk)</span><br><span class="line"><span class="built_in">print</span>(tt)</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alphabet:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">if</span> sha256((i+j+k+l+kk).encode()).hexdigest() == tt:</span><br><span class="line">                    p.sendline((i+j+k+l).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    s = p.recv()</span><br><span class="line"></span><br><span class="line">    poly = <span class="built_in">str</span>(s).split(<span class="string">&quot;\\n&quot;</span>)</span><br><span class="line">    rr = []</span><br><span class="line">    aa = []</span><br><span class="line">    cc = []</span><br><span class="line">    <span class="built_in">print</span>(poly)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(poly))</span><br><span class="line">    ps = poly[<span class="number">0</span>] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> ps[i] == <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> ps[i+<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            rr.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    ps = poly[<span class="number">1</span>] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> ps[i] == <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> ps[i+<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            aa.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    ps = poly[<span class="number">2</span>] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> ps[i] == <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> ps[i+<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            cc.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    r = findall(<span class="string">r&quot;\d+&quot;</span>,poly[<span class="number">0</span>])</span><br><span class="line">    a = findall(<span class="string">r&quot;\d+&quot;</span>,poly[<span class="number">1</span>])</span><br><span class="line">    c = findall(<span class="string">r&quot;\d+&quot;</span>,poly[<span class="number">2</span>])</span><br><span class="line">    r = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> r]</span><br><span class="line">    a = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">    c = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> r:</span><br><span class="line">        rr.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> a:</span><br><span class="line">        aa.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> c:</span><br><span class="line">        cc.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">1</span>:</span><br><span class="line">            rr.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">1</span>:</span><br><span class="line">            aa.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">1</span>:</span><br><span class="line">            cc.append(i)</span><br><span class="line">    <span class="built_in">print</span>(rr,aa,cc)</span><br><span class="line"></span><br><span class="line">    rp = <span class="number">0</span></span><br><span class="line">    ap = <span class="number">0</span></span><br><span class="line">    cp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rr:</span><br><span class="line">        rp += <span class="number">2</span> ** i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> aa:</span><br><span class="line">        ap += <span class="number">2</span> ** i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cc:</span><br><span class="line">        cp += <span class="number">2</span> ** i</span><br><span class="line">    <span class="built_in">print</span>(rp,ap,cp)</span><br><span class="line">    bp = GF2_div(GF2_sub(rp,cp),ap)</span><br><span class="line">    <span class="built_in">print</span>(bp)</span><br><span class="line">    sends = <span class="string">&quot;&quot;</span></span><br><span class="line">    strb = <span class="built_in">bin</span>(bp)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strb)):</span><br><span class="line">        <span class="keyword">if</span> strb[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(strb)-<span class="number">1</span>:</span><br><span class="line">                sends += <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="built_in">len</span>(strb)-<span class="number">2</span>:</span><br><span class="line">                sends += <span class="string">&quot;x&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sends += <span class="string">&quot;x^&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(strb)-i-<span class="number">1</span>)</span><br><span class="line">            sends += <span class="string">&quot; + &quot;</span></span><br><span class="line">    sends = sends[:-<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(sends)</span><br><span class="line">    p.sendline(sends.encode())</span><br><span class="line">    <span class="built_in">print</span>(p.recv())</span><br><span class="line">p.sendline(sends.encode())</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="myJWT"><a href="#myJWT" class="headerlink" title="myJWT"></a>myJWT</h3><p>关于JWT贴一篇不错的文章：<a href="https://www.jianshu.com/p/576dbf44b2ae">什么是 JWT — JSON WEB TOKEN —<br>Dearmadman</a><br>简单来说就是用户与服务器之间采用单点登录时的一个令牌，常用来认证身份。Token由“.”分割的三部分（header、payload、signature）组成。<br>题目中给出了服务器认证的源码，审一下。<br>首先是第三部分signature用到的签名协议，包含签名算法、sign函数和vrfy函数。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class ECDSA<span class="punctuation">&#123;</span></span><br><span class="line">public KeyPair keyGen() throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;EC&quot;</span>);</span><br><span class="line">keyPairGenerator.initialize(<span class="number">384</span>);</span><br><span class="line">KeyPair keyPair = keyPairGenerator.genKeyPair();</span><br><span class="line">return keyPair;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public byte<span class="punctuation">[</span><span class="punctuation">]</span> sign(byte<span class="punctuation">[</span><span class="punctuation">]</span> str<span class="punctuation">,</span> ECPrivateKey privateKey) throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">Signature signature = Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">signature.initSign(privateKey);</span><br><span class="line">signature.update(str);</span><br><span class="line">byte<span class="punctuation">[</span><span class="punctuation">]</span> sig = signature.sign();</span><br><span class="line">return sig;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public boolean verify(byte<span class="punctuation">[</span><span class="punctuation">]</span> sig<span class="punctuation">,</span> byte<span class="punctuation">[</span><span class="punctuation">]</span> str <span class="punctuation">,</span>ECPublicKey publicKey) throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">Signature signature = Signature.getInstance(<span class="string">&quot;SHA384withECDSAinP1363Format&quot;</span>);</span><br><span class="line">signature.initVerify(publicKey);</span><br><span class="line">signature.update(str);</span><br><span class="line">return signature.verify(sig);</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>基础的签名算法都规定好了，为每个用户生成公私钥对，私钥签名公钥认证，常规操作，暂时看不出什么漏洞点。接着看jwt部分：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">public class jwt<span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">public static int EXPIRE = <span class="number">60</span>;</span><br><span class="line">public static ECDSA ecdsa = new ECDSA();</span><br><span class="line">public static String generateToken(String user<span class="punctuation">,</span> ECPrivateKey ecPrivateKey) throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">JSONObject header = new JSONObject();</span><br><span class="line">JSONObject payload = new JSONObject();</span><br><span class="line">header.put(<span class="string">&quot;alg&quot;</span><span class="punctuation">,</span> <span class="string">&quot;myES&quot;</span>);</span><br><span class="line">header.put(<span class="string">&quot;typ&quot;</span><span class="punctuation">,</span> <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">String headerB64 = Base64.getUrlEncoder().encodeToString(header.toJSONString().getBytes());</span><br><span class="line">payload.put(<span class="string">&quot;iss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;qwb&quot;</span>);</span><br><span class="line">payload.put(<span class="string">&quot;exp&quot;</span><span class="punctuation">,</span> System.currentTimeMillis() + EXPIRE * <span class="number">1000</span>);</span><br><span class="line">payload.put(<span class="string">&quot;name&quot;</span><span class="punctuation">,</span> user);</span><br><span class="line">payload.put(<span class="string">&quot;admin&quot;</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span>);</span><br><span class="line">String payloadB64 = Base64.getUrlEncoder().encodeToString(payload.toJSONString().getBytes());</span><br><span class="line">String content = String.format(<span class="string">&quot;%s.%s&quot;</span><span class="punctuation">,</span> headerB64<span class="punctuation">,</span> payloadB64);</span><br><span class="line">byte<span class="punctuation">[</span><span class="punctuation">]</span> sig = ecdsa.sign(content.getBytes()<span class="punctuation">,</span> ecPrivateKey);</span><br><span class="line">String sigB64 = Base64.getUrlEncoder().encodeToString(sig);</span><br><span class="line"></span><br><span class="line">return String.format(<span class="string">&quot;%s.%s&quot;</span><span class="punctuation">,</span> content<span class="punctuation">,</span> sigB64);</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public static boolean verify(String token<span class="punctuation">,</span> ECPublicKey ecPublicKey) throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">String<span class="punctuation">[</span><span class="punctuation">]</span> parts = token.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">if (parts.length != <span class="number">3</span>) <span class="punctuation">&#123;</span></span><br><span class="line">return <span class="literal"><span class="keyword">false</span></span>;</span><br><span class="line"><span class="punctuation">&#125;</span>else <span class="punctuation">&#123;</span></span><br><span class="line">String headerB64 = parts<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>;</span><br><span class="line">String payloadB64 = parts<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>;</span><br><span class="line">String sigB64 = parts<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span>;</span><br><span class="line">String content = String.format(<span class="string">&quot;%s.%s&quot;</span><span class="punctuation">,</span> headerB64<span class="punctuation">,</span> payloadB64);</span><br><span class="line">byte<span class="punctuation">[</span><span class="punctuation">]</span> sig = Base64.getUrlDecoder().decode(sigB64);</span><br><span class="line">return ecdsa.verify(sig<span class="punctuation">,</span> content.getBytes()<span class="punctuation">,</span> ecPublicKey);</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public static boolean checkAdmin(String token<span class="punctuation">,</span> ECPublicKey ecPublicKey<span class="punctuation">,</span> String user) throws Exception<span class="punctuation">&#123;</span></span><br><span class="line">if(verify(token<span class="punctuation">,</span> ecPublicKey)) <span class="punctuation">&#123;</span></span><br><span class="line">String payloadB64 = token.split(<span class="string">&quot;\\.&quot;</span>)<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>;</span><br><span class="line">String payloadDecodeString = new String(Base64.getUrlDecoder().decode(payloadB64));</span><br><span class="line">JSONObject payload = JSON.parseObject(payloadDecodeString);</span><br><span class="line"></span><br><span class="line">if(!payload.getString(<span class="string">&quot;name&quot;</span>).equals(user)) <span class="punctuation">&#123;</span></span><br><span class="line">return <span class="literal"><span class="keyword">false</span></span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">if (payload.getLong(<span class="string">&quot;exp&quot;</span>) &lt; System.currentTimeMillis()) <span class="punctuation">&#123;</span></span><br><span class="line">return <span class="literal"><span class="keyword">false</span></span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">return payload.getBoolean(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"><span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span></span><br><span class="line">return <span class="literal"><span class="keyword">false</span></span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public static String getFlag(String token<span class="punctuation">,</span> ECPublicKey ecPublicKey<span class="punctuation">,</span> String user) throws Exception<span class="punctuation">&#123;</span></span><br><span class="line">String err = <span class="string">&quot;You are not the administrator.&quot;</span>;</span><br><span class="line">if(checkAdmin(token<span class="punctuation">,</span> ecPublicKey<span class="punctuation">,</span> user)) <span class="punctuation">&#123;</span></span><br><span class="line">File file = new File(<span class="string">&quot;/root/task/flag.txt&quot;</span>);</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(file));</span><br><span class="line">String flag = br.readLine();</span><br><span class="line">br.close();</span><br><span class="line">return flag;</span><br><span class="line"><span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span></span><br><span class="line">return err;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public static boolean task() throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">String user = input.nextLine().strip();</span><br><span class="line">System.out.print(String.format(<span class="string">&quot;hello %s, let&#x27;s start your challenge.\n&quot;</span><span class="punctuation">,</span> user));</span><br><span class="line">KeyPair keyPair = ecdsa.keyGen();</span><br><span class="line">ECPrivateKey ecPrivateKey = (ECPrivateKey) keyPair.getPrivate();</span><br><span class="line">ECPublicKey ecPublicKey = (ECPublicKey) keyPair.getPublic();</span><br><span class="line">String menu = <span class="string">&quot;1.generate token\n2.getflag\n&gt;&quot;</span>;</span><br><span class="line">Integer choice = <span class="number">0</span>;</span><br><span class="line">Integer count = <span class="number">0</span>;</span><br><span class="line">while (count &lt;= <span class="number">10</span>) <span class="punctuation">&#123;</span></span><br><span class="line">count++;</span><br><span class="line">System.out.print(menu);</span><br><span class="line">choice = Integer.parseInt(input.nextLine().strip());</span><br><span class="line">if(choice == <span class="number">1</span>) <span class="punctuation">&#123;</span></span><br><span class="line">String token = generateToken(user<span class="punctuation">,</span> ecPrivateKey);</span><br><span class="line">System.out.println(token);</span><br><span class="line"><span class="punctuation">&#125;</span> else if (choice == <span class="number">2</span>) <span class="punctuation">&#123;</span></span><br><span class="line">System.out.print(<span class="string">&quot;your token:&quot;</span>);</span><br><span class="line">String token = input.nextLine().strip();</span><br><span class="line">String flag = getFlag(token<span class="punctuation">,</span> ecPublicKey<span class="punctuation">,</span> user);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">input.close();</span><br><span class="line">break;</span><br><span class="line"><span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span></span><br><span class="line">input.close();</span><br><span class="line">break;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">return <span class="literal"><span class="keyword">true</span></span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">public static void main(String<span class="punctuation">[</span><span class="punctuation">]</span> args) throws Exception <span class="punctuation">&#123;</span></span><br><span class="line">task();</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>好长。。。练一下耐心审源码的能力，首先看令牌生成函数：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">header.put(<span class="string">&quot;alg&quot;</span><span class="punctuation">,</span> <span class="string">&quot;myES&quot;</span>);</span><br><span class="line">header.put(<span class="string">&quot;typ&quot;</span><span class="punctuation">,</span> <span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">String headerB64 = Base64.getUrlEncoder().encodeToString(header.toJSONString().getBytes());</span><br><span class="line">payload.put(<span class="string">&quot;iss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;qwb&quot;</span>);</span><br><span class="line">payload.put(<span class="string">&quot;exp&quot;</span><span class="punctuation">,</span> System.currentTimeMillis() + EXPIRE * <span class="number">1000</span>);</span><br><span class="line">payload.put(<span class="string">&quot;name&quot;</span><span class="punctuation">,</span> user);</span><br><span class="line">payload.put(<span class="string">&quot;admin&quot;</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span>);</span><br><span class="line">String payloadB64 = Base64.getUrlEncoder().encodeToString(payload.toJSONString().getBytes());</span><br><span class="line">String content = String.format(<span class="string">&quot;%s.%s&quot;</span><span class="punctuation">,</span> headerB64<span class="punctuation">,</span> payloadB64);</span><br><span class="line">byte<span class="punctuation">[</span><span class="punctuation">]</span> sig = ecdsa.sign(content.getBytes()<span class="punctuation">,</span> ecPrivateKey);</span><br><span class="line">String sigB64 = Base64.getUrlEncoder().encodeToString(sig);</span><br><span class="line">return String.format(<span class="string">&quot;%s.%s&quot;</span><span class="punctuation">,</span> content<span class="punctuation">,</span> sigB64);</span><br></pre></td></tr></table></figure><br>可以看到生成Token的几部分都已经做好了。<br>头部包含两个字段：算法myES和类型JWT。<br>payload包含四个字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;iss&quot;</span>:<span class="string">&quot;qwb&quot;</span>;<span class="string">&quot;exp&quot;</span>:&lt;System.gen()&gt;;<span class="string">&quot;name&quot;</span>:&lt;user.<span class="built_in">input</span>()&gt;;<span class="string">&quot;admin&quot;</span>:<span class="string">&quot;false&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>测试靶机可知exp记录时间，系统会自动生成；name可以随意提交。admin字段对应值为false，而登陆成功时该字段值应该为true，不过该字段为明文编码，可以随意修改。<br>将header和payload拼接一下，用私钥签个名作为signature，拼接起来即可得到一个非管理员用户的Token。<br>另外注意到jwt设置了过期，EXPIRE=60说明Token分发超过60s后该用户Token会被视为无效。<br>验签函数verify就是验证Token的三部分，checkAdmin函数验证Token是否过期以及用户是否为admin，如果是的话给flag。<br>因此jwt的逻辑大致清楚，我们需要构造一个payload绕过验签函数检测，伪造admin为true即可。然而题目给出的代码中没有明显漏洞，推测有现成的洞，搜索关键词发现CVE-2022-21449：<a href="https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/">Psychic Signatures of ECDSA</a><br>（这个洞加上关键词SHA384会查的很快<br>大致意思是说，json-ECDSA没有验证输入的签名$(r,s)$是否满足参数不为0，因此只需输入一个长度合适的空字节的base64编码就可以轻松绕过。<br>SHA-384散列值长度为384位，因此构造96个空字节的base64编码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><p>在靶机上提交用户名为abc，得到签名的前两部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJteUVTIn0=.eyJpc3MiOiJxd2IiLCJuYW1lIjoiYWJjIiwiYWRtaW4iOmZhbHNlLCJleHAiOjE2NTkxOTU1ODQ1ODB9</span><br></pre></td></tr></table></figure><p>分别解码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;typ&quot;</span>:<span class="string">&quot;JWT&quot;</span>,<span class="string">&quot;alg&quot;</span>:<span class="string">&quot;myES&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;iss&quot;</span>:<span class="string">&quot;qwb&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;admin&quot;</span>:false,<span class="string">&quot;exp&quot;</span>:<span class="number">1659195584580</span>&#125;</span><br></pre></td></tr></table></figure><p>修改admin字段为true，重新编码，最终构造payload为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJteUVTIn0=.eyJpc3MiOiJxd2IiLCJuYW1lIjoiYWJjIiwiYWRtaW4iOnRydWUsImV4cCI6MTY1OTE5NTU4NDU4MH0=.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><p>提交拿到flag。</p><h3 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h3><p>考察RSA当$N=p^rq$形式时的分解。可以找到论文：<a href="https://link.springer.com/chapter/10.1007/978-3-319-18681-8_28">New Attacks on RSA with Moduli $N=p^rq$</a><br>论文中阐述了三种分解$N$的方法，对应题目中生成的三组问题。第一组问题使用连分数法让$\frac{N_1}{N_2}$逼近$\frac{q_1}{q_2}$，第二种方法和第三种方法基于格的LLL算法进行因子搜索。关于本题的原理之后会另写一篇文章详细证明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tCf</span>(<span class="params">n, d</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> d:</span><br><span class="line">        res.append(n // d)</span><br><span class="line">        n, d = d, n % d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cf</span>(<span class="params">sub_res</span>):</span><br><span class="line">    n, d = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:</span><br><span class="line">        d, n = n, i * n + d</span><br><span class="line">    <span class="keyword">return</span> d, n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listFraction</span>(<span class="params">x, y</span>):</span><br><span class="line">    res = tCf(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(cf, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n11=<span class="number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span></span><br><span class="line">n12=<span class="number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span></span><br><span class="line">e11=<span class="number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span></span><br><span class="line">e12=<span class="number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span></span><br><span class="line"></span><br><span class="line">res = listFraction(n11, n12)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> n12 % i[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">and</span> n11 % i[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> i != (<span class="number">1</span>,<span class="number">1</span>):</span><br><span class="line">        q1 = i[<span class="number">1</span>]</span><br><span class="line">        q2 = i[<span class="number">0</span>]</span><br><span class="line">p1 = <span class="built_in">int</span>(gmpy2.iroot(n11 // q1, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p2 = <span class="built_in">int</span>(gmpy2.iroot(n12 // q2, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(p1,p2)</span><br><span class="line"></span><br><span class="line">c11=<span class="number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span></span><br><span class="line">c12=<span class="number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span></span><br><span class="line"></span><br><span class="line">phi11 = (p1) * (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line">phi12 = (p2) * (p2-<span class="number">1</span>) * (q2-<span class="number">1</span>)</span><br><span class="line">d11 = gmpy2.invert(e11,phi11)</span><br><span class="line">d12 = gmpy2.invert(e12,phi12)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c11,d11,n11)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c12,d12,n12)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line">n2 = <span class="number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span></span><br><span class="line">x = <span class="number">3549384841973213309621072870106254602253656209014197632823411827739864720839737811030401306800875843661955913236834617545674409639259372934721570288281471569069146201536309734296340629562207991295283896</span></span><br><span class="line">g = gcd(m1*m2*x-(m2-m1),n2)</span><br><span class="line">p2 = <span class="built_in">int</span>(gmpy2.iroot(g,<span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q2 = n2 // (p2 ** <span class="number">7</span>)</span><br><span class="line">e2 = <span class="number">0x10001</span></span><br><span class="line">phi2 = (p2 ** <span class="number">6</span>) * (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">d2 = gmpy2.invert(e2,phi2)</span><br><span class="line">c2 = <span class="number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span></span><br><span class="line">b = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">n3=<span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3=<span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line">x3 = <span class="number">16731588253866128571163910758846497670928988943944436618514118121761227689113110943465936457030051710610254169629932203082368465978112219532158626669990117160986135699541953274434781877420432743573801621</span></span><br><span class="line">g3 = gcd(e3*x3-b,n3)</span><br><span class="line">p3 = <span class="built_in">int</span>(gmpy2.iroot(g3,<span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q3 = n3 // (p3 ** <span class="number">7</span>)</span><br><span class="line">phi3 = (p3 ** <span class="number">6</span>) * (p3 - <span class="number">1</span>) * (q3 - <span class="number">1</span>)</span><br><span class="line">c3 = <span class="number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span></span><br><span class="line">d3 = gmpy2.invert(e3,phi3)</span><br><span class="line">m3 = <span class="built_in">pow</span>(c3,d3,n3)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m3)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;强网杯S6初赛-部分题解&quot;&gt;&lt;a href=&quot;#强网杯S6初赛-部分题解&quot; class=&quot;headerlink&quot; title=&quot;强网杯S6初赛 部分题解&quot;&gt;&lt;/a&gt;强网杯S6初赛 部分题解&lt;/h1&gt;&lt;p&gt;和师傅们一起打强网杯初赛，题目质量很高，算是打过的比较难的比</summary>
      
    
    
    
    <category term="CTF WriteUps" scheme="http://example.com/categories/CTF-WriteUps/"/>
    
    
  </entry>
  
  <entry>
    <title>巅峰极客2022初赛</title>
    <link href="http://example.com/2022/09/01/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22022%E5%88%9D%E8%B5%9B/"/>
    <id>http://example.com/2022/09/01/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22022%E5%88%9D%E8%B5%9B/</id>
    <published>2022-09-01T01:18:11.000Z</published>
    <updated>2022-09-01T08:26:52.343Z</updated>
    
    <content type="html"><![CDATA[<p>巅峰极客2022初赛，团队共解决7道题，合计2234分，排名第11位，晋级复赛。<br>（Misc有一道题赛后两分钟出了o(╥﹏╥)o，交了就第二了</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="point-power"><a href="#point-power" class="headerlink" title="point-power"></a>point-power</h3><p>给了一条椭圆曲线，参数p和b已知但是a未知，告知a即为flag。给了点G和二倍点2G的横坐标$x_1$、$x_2$。<br>简要推导一下可知：</p><script type="math/tex; mode=display">\lambda^2 \equiv x_2+2x_1 \space (mod \space p) \\y_1 \equiv \frac{3x_1^2+a}{2\lambda}\space(mod \space p) \\y_1^2 \equiv x_1^3+ax_1+b\space(mod \space p)</script><p>因此可以用Cipolla爆破出$\lambda$，再用$\lambda$表示$y_1$后代入曲线方程。此时形成的二次多项式同余方程只有一个未知数$a$，配方再用一次Cipolla爆破即可得到$a$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eulerCriterion</span>(<span class="params">a, p</span>):</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">pow</span>(a, <span class="built_in">int</span>((p-<span class="number">1</span>)/<span class="number">2</span>), p) == p-<span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cipollaMult</span>(<span class="params">x1, y1, x2, y2, u, p</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x1*x2 + y1*y2*u) % p), ((x1*y2 + x2*y1) % p)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cipollaAlgorithm</span>(<span class="params">n, p</span>):</span><br><span class="line">    a = Mod(n, p)</span><br><span class="line">    out = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> eulerCriterion(a, p) == -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(a) + <span class="string">&quot; is not a quadratic residue modulo &quot;</span> + <span class="built_in">str</span>(p))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">        conglst = []                                    <span class="comment">#congruence list</span></span><br><span class="line">        crtlst = []</span><br><span class="line">        factors = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">list</span>(factor(p)):</span><br><span class="line">            factors.append(<span class="built_in">int</span>(k[<span class="number">0</span>]))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> factors:</span><br><span class="line">            conglst.append(cipollaAlgorithm(a, f))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Permutations([<span class="number">0</span>, <span class="number">1</span>] * <span class="built_in">len</span>(factors), <span class="built_in">len</span>(factors)).<span class="built_in">list</span>():</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors)):</span><br><span class="line">                crtlst.append(<span class="built_in">int</span>(conglst[ j ][ i[j] ]))</span><br><span class="line"> </span><br><span class="line">            out.append(crt(crtlst, factors))</span><br><span class="line">            crtlst = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(out)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(p, <span class="number">1</span>, <span class="number">4</span>) == <span class="number">3</span>:</span><br><span class="line">        temp = <span class="built_in">pow</span>(a, <span class="built_in">int</span>((p+<span class="number">1</span>)/<span class="number">4</span>), p)</span><br><span class="line">        <span class="keyword">return</span> [temp, p - temp]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    t = randrange(<span class="number">2</span>, p)</span><br><span class="line">    u = <span class="built_in">pow</span>(t**<span class="number">2</span> - a, <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">while</span> (eulerCriterion(u, p) == <span class="number">1</span>):</span><br><span class="line">        t = randrange(<span class="number">2</span>, p)</span><br><span class="line">        u = <span class="built_in">pow</span>(t**<span class="number">2</span> - a, <span class="number">1</span>, p)</span><br><span class="line"> </span><br><span class="line">    x0, y0 = t, <span class="number">1</span></span><br><span class="line">    x, y = t, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>((p + <span class="number">1</span>) / <span class="number">2</span>) - <span class="number">1</span>):</span><br><span class="line">        x, y = cipollaMult(x, y, x0, y0, u, p)</span><br><span class="line"> </span><br><span class="line">    out.extend([x, p - x])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(out)</span><br><span class="line"></span><br><span class="line">p = <span class="number">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line">b = <span class="number">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line">x1 = <span class="number">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line">x2 = <span class="number">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lamSqr = (x2 + <span class="number">2</span> * x1) % p</span><br><span class="line"><span class="comment"># lam = cipollaAlgorithm(lamSqr, p)</span></span><br><span class="line">lam1 = <span class="number">2014880882082318301445894374501675195919976436255804247056910036068932318853083532875711742303096608453631262469539522882159038073258190729304974713113937514650838613626987477596673</span></span><br><span class="line">lam2 = <span class="number">1645176457813522187940238724941024715126756492701788142784797954170562669815889101006178590547300033800017555270304598550590120950840146559963599292976761087612944869060577845293950</span></span><br><span class="line"></span><br><span class="line">res = (<span class="number">4</span> * lam1 ** <span class="number">2</span> * (x1 ** <span class="number">3</span> + b) - <span class="number">12</span> * x1 ** <span class="number">3</span> * lam1 ** <span class="number">2</span> + <span class="number">4</span> * lam1 ** <span class="number">4</span> * x1 ** <span class="number">2</span>) % p</span><br><span class="line"><span class="comment"># aplus = cipollaAlgorithm(res, p)</span></span><br><span class="line">aplus1 = <span class="number">1370590950134392447563290310467074091332453364778953225609598164724491850785837752848492322413374912469146392849123620624141856740898793235764218415859608726708932969579886037927449</span></span><br><span class="line">aplus2 = <span class="number">2289466389761448041822842788975625819714279564178639164232109825515003137883134881033398010437021729784502424890720500808607302283199544053504355590231089875554850513107679284963174</span></span><br><span class="line">plus = (<span class="number">3</span> * x1 ** <span class="number">2</span> - <span class="number">2</span> * lam1 ** <span class="number">2</span> * x1) % p</span><br><span class="line">a1 = (aplus1 - plus) % p</span><br><span class="line">a2 = (aplus2 - plus) % p</span><br><span class="line"><span class="built_in">print</span>(a1) ---&gt; 这个是flag：<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br></pre></td></tr></table></figure><h3 id="strange-curve"><a href="#strange-curve" class="headerlink" title="strange curve"></a>strange curve</h3><p>史诗级非预期，被打烂了。<br>整个加密过程中只对x进行了加一操作，最后还在P坐标里给出了x的值。代入进去爆破一下发现x就是flag。（乐）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        y=lift(x,a,b,p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a*x*(y**<span class="number">2</span>-<span class="number">1</span>)%p==b*y*(x**<span class="number">2</span>-<span class="number">1</span>)%p</span><br><span class="line"></span><br><span class="line">P=(x,y)</span><br><span class="line">P = (<span class="number">56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149</span>, <span class="number">5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="easy-Forensic"><a href="#easy-Forensic" class="headerlink" title="easy_Forensic"></a>easy_Forensic</h3><p>volatility扫一下raw文件发现在cmdscan里发现使用了Explorer.exe。查一下iehistory发现桌面上存在一个111.raw文件。filescan查看一下文件，在桌面Desk上找到hint.txt，secret.zip，gift.jpg，wechat.txt等文件，尝试提取。<br><img src="https://img-blog.csdnimg.cn/e8aae208f2c843b9ace0c134d2b0d8f6.png#pic_center" alt="在这里插入图片描述"></p><p>发现除了hint.txt都可以提取出来。jpg图片下方存在黑色像素点，猜测高度被修改了。增加jpg图片高度发现Passwd：Nothing is more important than your life!<br><img src="https://img-blog.csdnimg.cn/59ab40e7afc74cc598b5e2175f43d961.jpeg#pic_center" alt="在这里插入图片描述"></p><p>尝试用password解zip失败，猜测需要提取hint.txt。Diskgenius挂载提取文件，得到提示：is_ not 。<br>将password中的空格改为下划线即可解压zip，拿到密钥。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A gift <span class="keyword">for</span> You:  wHeMscYvTluyRvjf5d7AEX5K4VlZeU2IiGpKLFzek1Q=</span><br></pre></td></tr></table></figure><br>wechat.txt打开之后不可读，应该是被加密了。根据题目信息搜集查一下微信解密相关内容，尝试了多个脚本最后找到文章：<a href="https://tttang.com/archive/1665/#toc_0x04">https://tttang.com/archive/1665/#toc_0x04</a>，微信数据库加密。<br>github查到脚本，<a href="https://github.com/x1hy9/WeChatUserDB/tree/83e83c92dc7b7f5ef5527832732c899add1e0b8b">WeChatUserDB</a>解密拿到数据库文件，sqlite3查询得到flag。</p><h3 id="Lost"><a href="#Lost" class="headerlink" title="Lost"></a>Lost</h3><p>赛后两分钟才搞出来的Misc题。<br>纯纯的脑洞题，但是这个脑洞确实常见，只能说时间分配很重要。（去帮着搜密码学第三题的论文耽误了时间）<br>给了30个zip压缩包文件，但都损坏了，里面有一个含有假flag的txt和一张图片。查看一下hex发现压缩包文件第一个PK的扩展区存在问题，但是这部分肯定无法硬爆。做提前一个小时一直在硬爆，思路偏了。<br>后来发现三十个压缩包几乎完全一样（这也说明肯定不是硬爆出来的），hash一下发现散列值不同，猜测压缩包之间可能存在极其细微的差别来隐藏信息。<br>（实际上这是国外CTF的常见隐写考法，几周前TFCCTF考过一个爆破crc32隐写的，也是给了一堆损坏的压缩包<br>用HexEditor比对一下发现所有文件只在第71、72两个字节存在不同，因此提取这两个字节的数据。最开始尝试的是字节i和字节i+1异或，但是得到的flag是残缺的，最后发现取相邻元素差值是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">k = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;flag&#123;&#125;.zip&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    c = f.read(<span class="number">72</span>)</span><br><span class="line">    k.append(<span class="number">256</span> * c[-<span class="number">2</span>] + c[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">abs</span>(k[i]-k[i+<span class="number">1</span>])),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;巅峰极客2022初赛，团队共解决7道题，合计2234分，排名第11位，晋级复赛。&lt;br&gt;（Misc有一道题赛后两分钟出了o(╥﹏╥)o，交了就第二了&lt;/p&gt;
&lt;h2 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="CTF WriteUps" scheme="http://example.com/categories/CTF-WriteUps/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/01/hello-world/"/>
    <id>http://example.com/2022/09/01/hello-world/</id>
    <published>2022-09-01T00:37:09.525Z</published>
    <updated>2022-09-01T00:37:09.525Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
