<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ch3v4l&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-01T07:30:24.175Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ch3v4l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>巅峰极客2022初赛</title>
    <link href="http://example.com/2022/09/01/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22022%E5%88%9D%E8%B5%9B/"/>
    <id>http://example.com/2022/09/01/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22022%E5%88%9D%E8%B5%9B/</id>
    <published>2022-09-01T01:18:11.000Z</published>
    <updated>2022-09-01T07:30:24.175Z</updated>
    
    <content type="html"><![CDATA[<p>巅峰极客2022初赛，团队共解决7道题，合计2234分，排名第11位，晋级复赛。<br>（Misc有一道题赛后两分钟出了o(╥﹏╥)o，交了就第二了</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="point-power"><a href="#point-power" class="headerlink" title="point-power"></a>point-power</h3><p>给了一条椭圆曲线，参数p和b已知但是a未知，告知a即为flag。给了点G和二倍点2G的横坐标$x_1$、$x_2$。<br>简要推导一下可知：</p><script type="math/tex; mode=display">\lambda^2 \equiv x_2+2x_1 \space (mod \space p) \\y_1 \equiv \frac{3x_1^2+a}{2\lambda}\space(mod \space p) \\y_1^2 \equiv x_1^3+ax_1+b\space(mod \space p)</script><p>因此可以用Cipolla爆破出$\lambda$，再用$\lambda$表示$y_1$后代入曲线方程。此时形成的二次多项式同余方程只有一个未知数$a$，配方再用一次Cipolla爆破即可得到$a$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eulerCriterion</span>(<span class="params">a, p</span>):</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">pow</span>(a, <span class="built_in">int</span>((p-<span class="number">1</span>)/<span class="number">2</span>), p) == p-<span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cipollaMult</span>(<span class="params">x1, y1, x2, y2, u, p</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x1*x2 + y1*y2*u) % p), ((x1*y2 + x2*y1) % p)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cipollaAlgorithm</span>(<span class="params">n, p</span>):</span><br><span class="line">    a = Mod(n, p)</span><br><span class="line">    out = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> eulerCriterion(a, p) == -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(a) + <span class="string">&quot; is not a quadratic residue modulo &quot;</span> + <span class="built_in">str</span>(p))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">        conglst = []                                    <span class="comment">#congruence list</span></span><br><span class="line">        crtlst = []</span><br><span class="line">        factors = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">list</span>(factor(p)):</span><br><span class="line">            factors.append(<span class="built_in">int</span>(k[<span class="number">0</span>]))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> factors:</span><br><span class="line">            conglst.append(cipollaAlgorithm(a, f))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Permutations([<span class="number">0</span>, <span class="number">1</span>] * <span class="built_in">len</span>(factors), <span class="built_in">len</span>(factors)).<span class="built_in">list</span>():</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors)):</span><br><span class="line">                crtlst.append(<span class="built_in">int</span>(conglst[ j ][ i[j] ]))</span><br><span class="line"> </span><br><span class="line">            out.append(crt(crtlst, factors))</span><br><span class="line">            crtlst = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(out)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(p, <span class="number">1</span>, <span class="number">4</span>) == <span class="number">3</span>:</span><br><span class="line">        temp = <span class="built_in">pow</span>(a, <span class="built_in">int</span>((p+<span class="number">1</span>)/<span class="number">4</span>), p)</span><br><span class="line">        <span class="keyword">return</span> [temp, p - temp]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    t = randrange(<span class="number">2</span>, p)</span><br><span class="line">    u = <span class="built_in">pow</span>(t**<span class="number">2</span> - a, <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">while</span> (eulerCriterion(u, p) == <span class="number">1</span>):</span><br><span class="line">        t = randrange(<span class="number">2</span>, p)</span><br><span class="line">        u = <span class="built_in">pow</span>(t**<span class="number">2</span> - a, <span class="number">1</span>, p)</span><br><span class="line"> </span><br><span class="line">    x0, y0 = t, <span class="number">1</span></span><br><span class="line">    x, y = t, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>((p + <span class="number">1</span>) / <span class="number">2</span>) - <span class="number">1</span>):</span><br><span class="line">        x, y = cipollaMult(x, y, x0, y0, u, p)</span><br><span class="line"> </span><br><span class="line">    out.extend([x, p - x])</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(out)</span><br><span class="line"></span><br><span class="line">p = <span class="number">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line">b = <span class="number">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line">x1 = <span class="number">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line">x2 = <span class="number">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lamSqr = (x2 + <span class="number">2</span> * x1) % p</span><br><span class="line"><span class="comment"># lam = cipollaAlgorithm(lamSqr, p)</span></span><br><span class="line">lam1 = <span class="number">2014880882082318301445894374501675195919976436255804247056910036068932318853083532875711742303096608453631262469539522882159038073258190729304974713113937514650838613626987477596673</span></span><br><span class="line">lam2 = <span class="number">1645176457813522187940238724941024715126756492701788142784797954170562669815889101006178590547300033800017555270304598550590120950840146559963599292976761087612944869060577845293950</span></span><br><span class="line"></span><br><span class="line">res = (<span class="number">4</span> * lam1 ** <span class="number">2</span> * (x1 ** <span class="number">3</span> + b) - <span class="number">12</span> * x1 ** <span class="number">3</span> * lam1 ** <span class="number">2</span> + <span class="number">4</span> * lam1 ** <span class="number">4</span> * x1 ** <span class="number">2</span>) % p</span><br><span class="line"><span class="comment"># aplus = cipollaAlgorithm(res, p)</span></span><br><span class="line">aplus1 = <span class="number">1370590950134392447563290310467074091332453364778953225609598164724491850785837752848492322413374912469146392849123620624141856740898793235764218415859608726708932969579886037927449</span></span><br><span class="line">aplus2 = <span class="number">2289466389761448041822842788975625819714279564178639164232109825515003137883134881033398010437021729784502424890720500808607302283199544053504355590231089875554850513107679284963174</span></span><br><span class="line">plus = (<span class="number">3</span> * x1 ** <span class="number">2</span> - <span class="number">2</span> * lam1 ** <span class="number">2</span> * x1) % p</span><br><span class="line">a1 = (aplus1 - plus) % p</span><br><span class="line">a2 = (aplus2 - plus) % p</span><br><span class="line"><span class="built_in">print</span>(a1) ---&gt; 这个是flag：<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br></pre></td></tr></table></figure><h3 id="strange-curve"><a href="#strange-curve" class="headerlink" title="strange curve"></a>strange curve</h3><p>史诗级非预期，被打烂了。<br>整个加密过程中只对x进行了加一操作，最后还在P坐标里给出了x的值。代入进去爆破一下发现x就是flag。（乐）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        y=lift(x,a,b,p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a*x*(y**<span class="number">2</span>-<span class="number">1</span>)%p==b*y*(x**<span class="number">2</span>-<span class="number">1</span>)%p</span><br><span class="line"></span><br><span class="line">P=(x,y)</span><br><span class="line">P = (<span class="number">56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149</span>, <span class="number">5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="easy-Forensic"><a href="#easy-Forensic" class="headerlink" title="easy_Forensic"></a>easy_Forensic</h3><p>volatility扫一下raw文件发现在cmdscan里发现使用了Explorer.exe。查一下iehistory发现桌面上存在一个111.raw文件。filescan查看一下文件，在桌面Desk上找到hint.txt，secret.zip，gift.jpg，wechat.txt等文件，尝试提取。<br><img src="https://img-blog.csdnimg.cn/e8aae208f2c843b9ace0c134d2b0d8f6.png#pic_center" alt="在这里插入图片描述"></p><p>发现除了hint.txt都可以提取出来。jpg图片下方存在黑色像素点，猜测高度被修改了。增加jpg图片高度发现Passwd：Nothing is more important than your life!<br><img src="https://img-blog.csdnimg.cn/59ab40e7afc74cc598b5e2175f43d961.jpeg#pic_center" alt="在这里插入图片描述"></p><p>尝试用password解zip失败，猜测需要提取hint.txt。Diskgenius挂载提取文件，得到提示：is_ not 。<br>将password中的空格改为下划线即可解压zip，拿到密钥。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A gift <span class="keyword">for</span> You:  wHeMscYvTluyRvjf5d7AEX5K4VlZeU2IiGpKLFzek1Q=</span><br></pre></td></tr></table></figure><br>wechat.txt打开之后不可读，应该是被加密了。根据题目信息搜集查一下微信解密相关内容，尝试了多个脚本最后找到文章：<a href="https://tttang.com/archive/1665/#toc_0x04">https://tttang.com/archive/1665/#toc_0x04</a>，微信数据库加密。<br>github查到脚本，<a href="https://github.com/x1hy9/WeChatUserDB/tree/83e83c92dc7b7f5ef5527832732c899add1e0b8b">WeChatUserDB</a>解密拿到数据库文件，sqlite3查询得到flag。</p><h3 id="Lost"><a href="#Lost" class="headerlink" title="Lost"></a>Lost</h3><p>赛后两分钟才搞出来的Misc题。<br>纯纯的脑洞题，但是这个脑洞确实常见，只能说时间分配很重要。（去帮着搜密码学第三题的论文耽误了时间）<br>给了30个zip压缩包文件，但都损坏了，里面有一个含有假flag的txt和一张图片。查看一下hex发现压缩包文件第一个PK的扩展区存在问题，但是这部分肯定无法硬爆。做提前一个小时一直在硬爆，思路偏了。<br>后来发现三十个压缩包几乎完全一样（这也说明肯定不是硬爆出来的），hash一下发现散列值不同，猜测压缩包之间可能存在极其细微的差别来隐藏信息。<br>（实际上这是国外CTF的常见隐写考法，几周前TFCCTF考过一个爆破crc32隐写的，也是给了一堆损坏的压缩包<br>用HexEditor比对一下发现所有文件只在第71、72两个字节存在不同，因此提取这两个字节的数据。最开始尝试的是字节i和字节i+1异或，但是得到的flag是残缺的，最后发现取相邻元素差值是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">k = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;flag&#123;&#125;.zip&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    c = f.read(<span class="number">72</span>)</span><br><span class="line">    k.append(<span class="number">256</span> * c[-<span class="number">2</span>] + c[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">abs</span>(k[i]-k[i+<span class="number">1</span>])),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;巅峰极客2022初赛，团队共解决7道题，合计2234分，排名第11位，晋级复赛。&lt;br&gt;（Misc有一道题赛后两分钟出了o(╥﹏╥)o，交了就第二了&lt;/p&gt;
&lt;h2 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="CTF WriteUps" scheme="http://example.com/categories/CTF-WriteUps/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/01/hello-world/"/>
    <id>http://example.com/2022/09/01/hello-world/</id>
    <published>2022-09-01T00:37:09.525Z</published>
    <updated>2022-09-01T00:37:09.525Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
