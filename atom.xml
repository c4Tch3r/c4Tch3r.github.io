<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ch3v4l&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-05T09:00:14.484Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ch3v4l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全协议笔记</title>
    <link href="http://example.com/2022/09/05/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/05/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-05T08:08:18.000Z</published>
    <updated>2022-09-05T09:00:14.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h1><p>大三上安全协议课笔记，概念性很强。</p><h2 id="第一章-安全协议概述"><a href="#第一章-安全协议概述" class="headerlink" title="第一章 安全协议概述"></a>第一章 安全协议概述</h2><h3 id="安全协议定义"><a href="#安全协议定义" class="headerlink" title="安全协议定义"></a>安全协议定义</h3><p>1.建立在密码算法上的高互通协议<br>2.运行在计算机通信网或分布式系统中<br>3.为安全需求各方提供一系列步骤<br>4.借助密码算法实现某种目的</p><h3 id="安全协议核心：密码算法"><a href="#安全协议核心：密码算法" class="headerlink" title="安全协议核心：密码算法"></a>安全协议核心：密码算法</h3><p>安全协议包括密码协议。</p><h3 id="安全协议分类"><a href="#安全协议分类" class="headerlink" title="安全协议分类"></a>安全协议分类</h3><p>1.按目的：密钥交换、认证、安全支付、安全通信、安全多方计算<br>2.与应用关联性：基础安全协议、应用安全协议<br>层次：密码算法&amp;&amp;计算困难问题$\rightarrow$基础密码协议$\rightarrow$高级密码协议$\rightarrow$应用安全协议</p><h3 id="安全协议特点"><a href="#安全协议特点" class="headerlink" title="安全协议特点"></a>安全协议特点</h3><p>1.满足正确性<br>2.执行效率合格<br>3.满足安全需求<br>4.鲁棒性（在含有恶意参与下正确执行）</p><h3 id="安全协议模型"><a href="#安全协议模型" class="headerlink" title="安全协议模型"></a>安全协议模型</h3><p>模型三要素：协议参与者类型，各参与者网络连接状况、攻击者能力</p><h4 id="协议参与者类型"><a href="#协议参与者类型" class="headerlink" title="协议参与者类型"></a>协议参与者类型</h4><p>协议参与者、协议攻击者（有时候攻击者也是参与者）、可信第三方（TTP）、仲裁</p><h4 id="网络连接情况"><a href="#网络连接情况" class="headerlink" title="网络连接情况"></a>网络连接情况</h4><p>同步网络：共享全局时钟。信息在第t个时钟周期传送，第t+1个时钟结束保证各接收方得到信息。<br>非同步网络：信息从发送到接收经历不确定个时钟周期，且信息到达顺序可能改变。<br>大部分安全协议研究在同步网络下。<br>某些安全协议如安全多方计算需要广播信道。</p><h4 id="参与者诚实度"><a href="#参与者诚实度" class="headerlink" title="参与者诚实度"></a>参与者诚实度</h4><p>1.诚实参与者：按要求参与协议<br>2.半诚实参与者：按要求参与协议，但执行被动攻击，窃听协议进行时所有信息<br>3.恶意攻击者：不仅窃听信息还控制不诚实参与者按照自己的设计参与协议</p><h4 id="协议攻击者能力"><a href="#协议攻击者能力" class="headerlink" title="协议攻击者能力"></a>协议攻击者能力</h4><p>1.计算能力：无限（信息论安全）、概率多项式时间（密码学安全）<br>2.对通信网络控制能力：安全信道（不能窃听不能篡改）、认证信道（能窃听不能篡改）、非认证信道（能窃听能篡改）<br>3.是否主动攻击：只窃听不控制不诚实参与者行为（被动攻击）、既窃听又控制不诚实参与者行为（主动攻击）<br>4.是否动态攻击：事先买通（静态攻击）、根据协议执行情况调整买通（动态攻击）</p><h3 id="Dolev-Yao模型"><a href="#Dolev-Yao模型" class="headerlink" title="Dolev-Yao模型"></a>Dolev-Yao模型</h3><p>认证协议与密码系统分离、不能低估攻击者的知识与能力</p><h3 id="安全属性"><a href="#安全属性" class="headerlink" title="安全属性"></a>安全属性</h3><p>认证性（防假冒）、机密性（防泄漏）、完整性（防篡改）、非否认性（防抵赖）、公平性（防越级）、匿名性（身份保密）</p><h3 id="安全协议设计流程"><a href="#安全协议设计流程" class="headerlink" title="安全协议设计流程"></a>安全协议设计流程</h3><p>1.需求分析（要实现什么功能）<br>2.需求定义（描述功能）<br>3.协议具体步骤设计（如何实现功能）<br>4.协议正确性分析（是否正确实现功能）<br>5.协议安全性分析（是否安全）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安全协议&quot;&gt;&lt;a href=&quot;#安全协议&quot; class=&quot;headerlink&quot; title=&quot;安全协议&quot;&gt;&lt;/a&gt;安全协议&lt;/h1&gt;&lt;p&gt;大三上安全协议课笔记，概念性很强。&lt;/p&gt;
&lt;h2 id=&quot;第一章-安全协议概述&quot;&gt;&lt;a href=&quot;#第一章-安全协议概述</summary>
      
    
    
    
    <category term="大三课程" scheme="http://example.com/categories/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>羊城杯2022 部分题解</title>
    <link href="http://example.com/2022/09/04/%E7%BE%8A%E5%9F%8E%E6%9D%AF2022-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/09/04/%E7%BE%8A%E5%9F%8E%E6%9D%AF2022-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2022-09-04T07:05:56.000Z</published>
    <updated>2022-09-07T07:39:03.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2022-部分题解"><a href="#羊城杯2022-部分题解" class="headerlink" title="羊城杯2022 部分题解"></a>羊城杯2022 部分题解</h1><p>2678.54分39名。<br>排名不算高，但是比赛过程还是挺有意思的，虽然时好时坏的平台和脑洞题很屑。<br>Crypto有大佬去carry了，这次只搞了Misc，Web辅助坐牢。</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>ROT13+base32</p><h2 id="迷失幻境"><a href="#迷失幻境" class="headerlink" title="迷失幻境"></a>迷失幻境</h2><p>vmdk改7z解压，系统盘回收站里发现RE4UUGI.jpg、IE4UUGI.jpg，但是后一个文件只是后缀名带jpg，不是图片。<br>迷失幻境文件夹下面给了1.png到100.png，但是45.png丢了，其他图片算一下md5发现相同，说明只是文件名不同，关键在找到45.png。<br>回到回收站发现有一个1.1MB的RJ3JGVF大小看着挺像图片的，hex查一下发现是png格式只不过丢了89504e47头，补全打开发现和迷失幻境文件夹里的图片一样，推测这个就是45.png。<br><img src="https://img-blog.csdnimg.cn/aaea92c72f6c427b87719ff0719e48df.png#pic_center" alt="在这里插入图片描述"><br>这个图片和其他图片大小略有不同，stegsolve异或一下拿到key。<br><img src="https://img-blog.csdnimg.cn/61f76fe2db014e6ea8ca414692e83485.png#pic_center" alt="在这里插入图片描述"><br>然后去解那个哒哒哒.jpg了，但是试了几个都爆不出来。<br>后来发现RE4UUGI.jpg属性里一个提示“猜不出来”，outguess一下拿到flag。</p><h2 id="where-is-secret"><a href="#where-is-secret" class="headerlink" title="where_is_secret"></a>where_is_secret</h2><p>屑题，最开始不给源码，<del>猜个头</del><br>vig.txt提示维吉尼亚加密，用在线爆破网站爆一下得到密钥gwht和压缩包密码GWHT@R1nd0yyds。<br>解压拿到out.bmp，结合提示给出的加密脚本写解密代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;out.bmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">dict</span>()</span><br><span class="line">k = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">371</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">371</span>):</span><br><span class="line">            p = img.getpixel((j,i))</span><br><span class="line">            f.write(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">bin</span>(p[<span class="number">1</span>])[<span class="number">2</span>:].zfill(<span class="number">8</span>)+<span class="built_in">bin</span>(p[<span class="number">2</span>])[<span class="number">2</span>:].zfill(<span class="number">8</span>),<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p> 得到out.txt，内容穿插着flag，写正则表达式提取特殊字符后观察手动拼接即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">a = re.findall(<span class="string">&#x27;[^a-z\&#123;\&#125;0-9][a-z\&#123;\&#125;0-9][^a-z\&#123;\&#125;0-9]&#x27;</span>, f, re.M)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;h1d3_1n_th3_p1ctur3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h2><p>这题拿了个四血，乐。<br>binwalk一下流量包发现里面藏了一个压缩包，其中hide&amp;seek.py和secret文件被加密，key.log可以分离但是提示损坏，估计是binwalk导致的。<br>在流量包中ftp协议报文下找到一个important.zip，推测为得到的压缩包，追踪ftp-data得到压缩包文件，提取出完整的key.log。<br><img src="https://img-blog.csdnimg.cn/cd9d60c76d0a4437ba7878b4cf12ddf5.png#pic_center" alt="在这里插入图片描述"><br>报文中有大量的TLS流量，在preferences中导入log文件中的密钥信息，查询发现部分TLS流被解密。在stream29中发现使用邮箱传输了数据，源数据中查询到FFD8字段，导出得到含有压缩包密码的图片。<br><img src="https://img-blog.csdnimg.cn/329ce3fdae73453c9cfbb556e90afceb.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a450a201c2af4020a66447fc1c2e94f8.jpeg#pic_center" alt="在这里插入图片描述"><br>解压得到python源码和secret，源码用于加密图片，逆向解密即可。（这题加密代码跟DS初赛基本一样）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array, zeros, uint8</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;cat.png&quot;</span>)</span><br><span class="line">w, h = image.size</span><br><span class="line">imagearray = array(image)</span><br><span class="line"></span><br><span class="line">x = <span class="number">5999540678407978169965856946811257903979429787575580150595711549672916183293763090704344230372835328</span></span><br><span class="line">y = <span class="number">6310149030391323406342737832910952782997118359318834776480172449836047279615976753524231989362688</span></span><br><span class="line">kn = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x1 = <span class="built_in">round</span>(x/y*<span class="number">0.001</span>, <span class="number">16</span>)</span><br><span class="line">u1 = y*<span class="number">3650</span>/x</span><br><span class="line">x2 = <span class="built_in">round</span>(x/y*<span class="number">0.00101</span>, <span class="number">16</span>)</span><br><span class="line">u2 = y*<span class="number">3675</span>/x</span><br><span class="line">x3 = <span class="built_in">round</span>(x/y*<span class="number">0.00102</span>, <span class="number">16</span>)</span><br><span class="line">u3 = y*<span class="number">3680</span>/x</span><br><span class="line">kt = [x1, x2, x3]</span><br><span class="line"><span class="built_in">print</span>(kt)</span><br><span class="line"></span><br><span class="line">temp_image = zeros(shape=[h, w, <span class="number">3</span>], dtype=uint8)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, kn):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">            x1 = u1 * x1 * (<span class="number">1</span> - x1)</span><br><span class="line">            x2 = u2 * x2 * (<span class="number">1</span> - x2)</span><br><span class="line">            x3 = u3 * x3 * (<span class="number">1</span> - x3)</span><br><span class="line">            r1 = <span class="built_in">int</span>(x1*<span class="number">255</span>)</span><br><span class="line">            r2 = <span class="built_in">int</span>(x2*<span class="number">255</span>)</span><br><span class="line">            r3 = <span class="built_in">int</span>(x3*<span class="number">255</span>)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                temp_image[i][j][t] = (imagearray[i][j][t]-((r1+r2) ^ r3)) % <span class="number">256</span></span><br><span class="line">    x1 = kt[<span class="number">0</span>]</span><br><span class="line">    x2 = kt[<span class="number">1</span>]</span><br><span class="line">    x3 = kt[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">encflagarray = Image.fromarray(temp_image)</span><br><span class="line">encflagarray.show()</span><br><span class="line">encflagarray.save(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到图片，搜图发现是MaxiCode码。<a href="https://zh.wikipedia.org/wiki/File:MaxiCode.svg">Maxicode Wiki</a><br>中间起定位作用的圆圈被猫代替了，找个示例码截下来手动覆盖一下，扫描得到flag。</p><hr><p>9.7 更新一下Misc后两道题</p><h2 id="寻宝"><a href="#寻宝" class="headerlink" title="寻宝"></a>寻宝</h2><p>这个题最初卡了很长时间，后来发现他是把文件按字节倒转了。<br>开头四个字节是05 B4 30 40，是zip格式头504B0304倒转，一直看到文件尾发现就是整个zip文件被按字节倒换了，换回来就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;treasure.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">outfile = <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">ss = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    c = f.read(<span class="number">1</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> c:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ss += <span class="built_in">hex</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:].zfill(<span class="number">2</span>)[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">outfile.write(ss)</span><br></pre></td></tr></table></figure><p>导入HexEditor解压一下，得到一个小游戏，下一层压缩包密码隐藏在游戏里。鉴于重点在于看到每一关而非打游戏，直接开挂把生命拉满。<br>比赛的时候给了提示让注意地形，前四关的地形和猪圈密码类似（如下图是第一关地形），查一下得到是变种的猪圈密码。对应解出一段密码OWOH。<br><img src="https://img-blog.csdnimg.cn/8ad53cf663754738af3147b428135d59.png#pic_center" alt="在这里插入图片描述"><br>后来给了第二个提示让注意琴键对应的音符，背景音乐里有一段混音，音高对应数字114514。<br>题目压缩包里面还提到第五关存在电波，因此接着往后打。第五关之后地形类似方波，一路打通关并记下地形波形。<br><img src="https://img-blog.csdnimg.cn/adc9aa3c34f04df6a7be0ad32637de9a.jpeg#pic_center" alt="在这里插入图片描述"><br>这玩意多少有点抽象。<br>最开始以为只看高电平与低电平就行，后来发现转出来的东西不大对劲，而且每一关地形都分为左右两部分，因此变化应该发生在0.5T位置。这说明应该是Manchester编码。<br>正常的Manchester编码，中间时刻从低到高跳变代表0，反之代表1；差分Manchester编码，在每个时钟周期开始时有跳变代表0，无跳变代表1。整个图形变化都是从低到高后从高到低，因此Manchester编码一定是01相间，没有意义，因此推测是差分Manchester编码。按这个规律尝试解析图形，得到二进制串01011111011000010011000101011111，bin2ascii得到：_a1_。<br>三部分拼一下即可，估计_a1_在中间，因此口令是：OWOH_a1_114514。解压得到flag文件，放到sublime下查看看到零宽字节。<br><img src="https://img-blog.csdnimg.cn/891f2369d98a4b57af0f9cc0f667f254.png#pic_center" alt="在这里插入图片描述"><br>零宽字节隐写在线解一下即可得到flag。</p><h2 id="Unlimited-Zip-Works"><a href="#Unlimited-Zip-Works" class="headerlink" title="Unlimited Zip Works"></a>Unlimited Zip Works</h2><p>这个题比赛时没做出来。后来看其他博客知道这是个zip注释隐藏的压缩包套娃，是不能简单用binwalk分离出来的。<br>分享一下原文链接，大佬tql。<br><a href="https://blog.csdn.net/xjh8023/article/details/126688058?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166253353416800182794949%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=166253353416800182794949&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-19-126688058-null-null.142%5Ev47%5Epc_rank_34_ecpm25,201%5Ev3%5Econtrol_1&amp;utm_term=%E7%BE%8A%E5%9F%8E%E6%9D%AF2022&amp;spm=1018.2226.3001.4187">2022年羊城杯wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;羊城杯2022-部分题解&quot;&gt;&lt;a href=&quot;#羊城杯2022-部分题解&quot; class=&quot;headerlink&quot; title=&quot;羊城杯2022 部分题解&quot;&gt;&lt;/a&gt;羊城杯2022 部分题解&lt;/h1&gt;&lt;p&gt;2678.54分39名。&lt;br&gt;排名不算高，但是比赛过程还是</summary>
      
    
    
    
    <category term="CTF-Writeups" scheme="http://example.com/categories/CTF-Writeups/"/>
    
    
  </entry>
  
</feed>
